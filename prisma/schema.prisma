datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model InviteCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  usedBy    User?    @relation("UserInviteCode", fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String         @unique
  password      String
  createdAt     DateTime       @default(now())
  inviteCodes   InviteCode[]   @relation("UserInviteCode")
  notifications Notification[]
  pushToken     PushToken?
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  metadata  Json? // Optional field to store additional data for notifications, such as roomName or other metadata
  type      String? // Optional field to store the type of the notification (e.g., live_stream)
}

model PushToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
}

model RecordingSession {
  id         String      @id @default(cuid()) @map("_id")
  roomId     String
  sourceUser String
  startedAt  DateTime    @default(now())
  endedAt    DateTime?
  recordings Recording[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Recording {
  id               String           @id @default(cuid()) @map("_id")
  sessionId        String
  participantId    String
  s3Key            String
  duration         Int? // Duration in seconds
  size             Int? // Size in bytes
  status           RecordingStatus  @default(IN_PROGRESS)
  recordingSession RecordingSession @relation(fields: [sessionId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

enum RecordingStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}
